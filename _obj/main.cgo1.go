// Code generated by cmd/cgo; DO NOT EDIT.

//line main.go:1:1
package randomhash; import _cgo_unsafe "unsafe"

/* 
#cgo CXXFLAGS: -I. 
#cgo CFLAGS: -I. 
#cgo LDFLAGS: -lstdc++ 

#include "RandomHash.h"
#include "utils.h"
*/
import _ "unsafe"

import (
	"math/big"
	"unsafe"
)

type RandomHash struct {
	hashrate int64
}

func (rh *RandomHash) ScanHash(block []byte, stop <-chan struct{}, index int) uint64 {

}

func (rh *RandomHash) ScanHash() {

}

func (rh *RandomHash) GetHashrate() int64 {
	return rh.hashrate
}

func (rh *RandomHash) Verify(block []byte) bool {
	// C.RandomHash_Simple()
}

// Search , aka ScanHash
func (rh *RandomHash) Search(block []byte, index int) uint64 {

}

func (rh *RandomHash) CalcHash(block []byte, nonce uint64) *big.Int {
	var in unsafe.Pointer = func(_cgo0 []byte) _cgo_unsafe.Pointer {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_CBytes)(_cgo0);}(block)
	var out unsafe.Pointer = (_Cfunc__CMalloc)(HashLength)
	(_Cfunc_RandomHash_Simple)((*_Ctype_uint8_t)(in), (*_Ctype_uint8_t)(out))
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(in)
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(out)

	return hash
}
