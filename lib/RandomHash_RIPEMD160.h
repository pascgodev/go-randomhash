/**
 *
 * Copyright 2018 Polyminer1 <https://github.com/polyminer1>
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along with
 * this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

///
/// @file
/// @copyright Polyminer1, QualiaLibre

#include "RandomHash_core.h"

#define RIPEMD160_BLOCK_SIZE 64

inline void Ripemd160RoundFunction(uint32_t* data, uint32_t* state)
{
	uint32_t a, b, c, d, e, aa, bb, cc, dd, ee;

	a = state[0]; 
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	aa = a;
	bb = b;
	cc = c;
	dd = d;
	ee = e;

	a = a + (data[0] + (b ^ c ^ d));
	a = ROTL32(a, 11) + e;
	c = ROTL32(c, 10);
	e = e + (data[1] + (a ^ b ^ c));
	e = ROTL32(e, 14) + d;
	b = ROTL32(b, 10);
	d = d + (data[2] + (e ^ a ^ b));
	d = ROTL32(d, 15) + c;
	a = ROTL32(a, 10);
	c = c + (data[3] + (d ^ e ^ a));
	c = ROTL32(c, 12) + b;
	e = ROTL32(e, 10);
	b = b + (data[4] + (c ^ d ^ e));
	b = ROTL32(b, 5) + a;
	d = ROTL32(d, 10);
	a = a + (data[5] + (b ^ c ^ d));
	a = ROTL32(a, 8) + e;
	c = ROTL32(c, 10);
	e = e + (data[6] + (a ^ b ^ c));
	e = ROTL32(e, 7) + d;
	b = ROTL32(b, 10);
	d = d + (data[7] + (e ^ a ^ b));
	d = ROTL32(d, 9) + c;
	a = ROTL32(a, 10);
	c = c + (data[8] + (d ^ e ^ a));
	c = ROTL32(c, 11) + b;
	e = ROTL32(e, 10);
	b = b + (data[9] + (c ^ d ^ e));
	b = ROTL32(b, 13) + a;
	d = ROTL32(d, 10);
	a = a + (data[10] + (b ^ c ^ d));
	a = ROTL32(a, 14) + e;
	c = ROTL32(c, 10);
	e = e + (data[11] + (a ^ b ^ c));
	e = ROTL32(e, 15) + d;
	b = ROTL32(b, 10);
	d = d + (data[12] + (e ^ a ^ b));
	d = ROTL32(d, 6) + c;
	a = ROTL32(a, 10);
	c = c + (data[13] + (d ^ e ^ a));
	c = ROTL32(c, 7) + b;
	e = ROTL32(e, 10);
	b = b + (data[14] + (c ^ d ^ e));
	b = ROTL32(b, 9) + a;
	d = ROTL32(d, 10);
	a = a + (data[15] + (b ^ c ^ d));
	a = ROTL32(a, 8) + e;
	c = ROTL32(c, 10);

	aa = aa + (data[5] + RH_RIPEMD_C1 + (bb ^ (cc | ~dd)));
	aa = ROTL32(aa, 8) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[14] + RH_RIPEMD_C1 + (aa ^ (bb | ~cc)));
	ee = ROTL32(ee, 9) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[7] + RH_RIPEMD_C1 + (ee ^ (aa | ~bb)));
	dd = ROTL32(dd, 9) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[0] + RH_RIPEMD_C1 + (dd ^ (ee | ~aa)));
	cc = ROTL32(cc, 11) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[9] + RH_RIPEMD_C1 + (cc ^ (dd | ~ee)));
	bb = ROTL32(bb, 13) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[2] + RH_RIPEMD_C1 + (bb ^ (cc | ~dd)));
	aa = ROTL32(aa, 15) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[11] + RH_RIPEMD_C1 + (aa ^ (bb | ~cc)));
	ee = ROTL32(ee, 15) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[4] + RH_RIPEMD_C1 + (ee ^ (aa | ~bb)));
	dd = ROTL32(dd, 5) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[13] + RH_RIPEMD_C1 + (dd ^ (ee | ~aa)));
	cc = ROTL32(cc, 7) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[6] + RH_RIPEMD_C1 + (cc ^ (dd | ~ee)));
	bb = ROTL32(bb, 7) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[15] + RH_RIPEMD_C1 + (bb ^ (cc | ~dd)));
	aa = ROTL32(aa, 8) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[8] + RH_RIPEMD_C1 + (aa ^ (bb | ~cc)));
	ee = ROTL32(ee, 11) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[1] + RH_RIPEMD_C1 + (ee ^ (aa | ~bb)));
	dd = ROTL32(dd, 14) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[10] + RH_RIPEMD_C1 + (dd ^ (ee | ~aa)));
	cc = ROTL32(cc, 14) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[3] + RH_RIPEMD_C1 + (cc ^ (dd | ~ee)));
	bb = ROTL32(bb, 12) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[12] + RH_RIPEMD_C1 + (bb ^ (cc | ~dd)));
	aa = ROTL32(aa, 6) + ee;
	cc = ROTL32(cc, 10);

	e = e + (data[7] + RH_RIPEMD_C2 + ((a & b) | (~a & c)));
	e = ROTL32(e, 7) + d;
	b = ROTL32(b, 10);
	d = d + (data[4] + RH_RIPEMD_C2 + ((e & a) | (~e & b)));
	d = ROTL32(d, 6) + c;
	a = ROTL32(a, 10);
	c = c + (data[13] + RH_RIPEMD_C2 + ((d & e) | (~d & a)));
	c = ROTL32(c, 8) + b;
	e = ROTL32(e, 10);
	b = b + (data[1] + RH_RIPEMD_C2 + ((c & d) | (~c & e)));
	b = ROTL32(b, 13) + a;
	d = ROTL32(d, 10);
	a = a + (data[10] + RH_RIPEMD_C2 + ((b & c) | (~b & d)));
	a = ROTL32(a, 11) + e;
	c = ROTL32(c, 10);
	e = e + (data[6] + RH_RIPEMD_C2 + ((a & b) | (~a & c)));
	e = ROTL32(e, 9) + d;
	b = ROTL32(b, 10);
	d = d + (data[15] + RH_RIPEMD_C2 + ((e & a) | (~e & b)));
	d = ROTL32(d, 7) + c;
	a = ROTL32(a, 10);
	c = c + (data[3] + RH_RIPEMD_C2 + ((d & e) | (~d & a)));
	c = ROTL32(c, 15) + b;
	e = ROTL32(e, 10);
	b = b + (data[12] + RH_RIPEMD_C2 + ((c & d) | (~c & e)));
	b = ROTL32(b, 7) + a;
	d = ROTL32(d, 10);
	a = a + (data[0] + RH_RIPEMD_C2 + ((b & c) | (~b & d)));
	a = ROTL32(a, 12) + e;
	c = ROTL32(c, 10);
	e = e + (data[9] + RH_RIPEMD_C2 + ((a & b) | (~a & c)));
	e = ROTL32(e, 15) + d;
	b = ROTL32(b, 10);
	d = d + (data[5] + RH_RIPEMD_C2 + ((e & a) | (~e & b)));
	d = ROTL32(d, 9) + c;
	a = ROTL32(a, 10);
	c = c + (data[2] + RH_RIPEMD_C2 + ((d & e) | (~d & a)));
	c = ROTL32(c, 11) + b;
	e = ROTL32(e, 10);
	b = b + (data[14] + RH_RIPEMD_C2 + ((c & d) | (~c & e)));
	b = ROTL32(b, 7) + a;
	d = ROTL32(d, 10);
	a = a + (data[11] + RH_RIPEMD_C2 + ((b & c) | (~b & d)));
	a = ROTL32(a, 13) + e;
	c = ROTL32(c, 10);
	e = e + (data[8] + RH_RIPEMD_C2 + ((a & b) | (~a & c)));
	e = ROTL32(e, 12) + d;
	b = ROTL32(b, 10);

	ee = ee + (data[6] + RH_RIPEMD_C3 + ((aa & cc) | (bb & ~cc)));
	ee = ROTL32(ee, 9) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[11] + RH_RIPEMD_C3 + ((ee & bb) | (aa & ~bb)));
	dd = ROTL32(dd, 13) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[3] + RH_RIPEMD_C3 + ((dd & aa) | (ee & ~aa)));
	cc = ROTL32(cc, 15) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[7] + RH_RIPEMD_C3 + ((cc & ee) | (dd & ~ee)));
	bb = ROTL32(bb, 7) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[0] + RH_RIPEMD_C3 + ((bb & dd) | (cc & ~dd)));
	aa = ROTL32(aa, 12) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[13] + RH_RIPEMD_C3 + ((aa & cc) | (bb & ~cc)));
	ee = ROTL32(ee, 8) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[5] + RH_RIPEMD_C3 + ((ee & bb) | (aa & ~bb)));
	dd = ROTL32(dd, 9) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[10] + RH_RIPEMD_C3 + ((dd & aa) | (ee & ~aa)));
	cc = ROTL32(cc, 11) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[14] + RH_RIPEMD_C3 + ((cc & ee) | (dd & ~ee)));
	bb = ROTL32(bb, 7) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[15] + RH_RIPEMD_C3 + ((bb & dd) | (cc & ~dd)));
	aa = ROTL32(aa, 7) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[8] + RH_RIPEMD_C3 + ((aa & cc) | (bb & ~cc)));
	ee = ROTL32(ee, 12) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[12] + RH_RIPEMD_C3 + ((ee & bb) | (aa & ~bb)));
	dd = ROTL32(dd, 7) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[4] + RH_RIPEMD_C3 + ((dd & aa) | (ee & ~aa)));
	cc = ROTL32(cc, 6) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[9] + RH_RIPEMD_C3 + ((cc & ee) | (dd & ~ee)));
	bb = ROTL32(bb, 15) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[1] + RH_RIPEMD_C3 + ((bb & dd) | (cc & ~dd)));
	aa = ROTL32(aa, 13) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[2] + RH_RIPEMD_C3 + ((aa & cc) | (bb & ~cc)));
	ee = ROTL32(ee, 11) + dd;
	bb = ROTL32(bb, 10);

	d = d + (data[3] + RH_RIPEMD_C4 + ((e | ~a) ^ b));
	d = ROTL32(d, 11) + c;
	a = ROTL32(a, 10);
	c = c + (data[10] + RH_RIPEMD_C4 + ((d | ~e) ^ a));
	c = ROTL32(c, 13) + b;
	e = ROTL32(e, 10);
	b = b + (data[14] + RH_RIPEMD_C4 + ((c | ~d) ^ e));
	b = ROTL32(b, 6) + a;
	d = ROTL32(d, 10);
	a = a + (data[4] + RH_RIPEMD_C4 + ((b | ~c) ^ d));
	a = ROTL32(a, 7) + e;
	c = ROTL32(c, 10);
	e = e + (data[9] + RH_RIPEMD_C4 + ((a | ~b) ^ c));
	e = ROTL32(e, 14) + d;
	b = ROTL32(b, 10);
	d = d + (data[15] + RH_RIPEMD_C4 + ((e | ~a) ^ b));
	d = ROTL32(d, 9) + c;
	a = ROTL32(a, 10);
	c = c + (data[8] + RH_RIPEMD_C4 + ((d | ~e) ^ a));
	c = ROTL32(c, 13) + b;
	e = ROTL32(e, 10);
	b = b + (data[1] + RH_RIPEMD_C4 + ((c | ~d) ^ e));
	b = ROTL32(b, 15) + a;
	d = ROTL32(d, 10);
	a = a + (data[2] + RH_RIPEMD_C4 + ((b | ~c) ^ d));
	a = ROTL32(a, 14) + e;
	c = ROTL32(c, 10);
	e = e + (data[7] + RH_RIPEMD_C4 + ((a | ~b) ^ c));
	e = ROTL32(e, 8) + d;
	b = ROTL32(b, 10);
	d = d + (data[0] + RH_RIPEMD_C4 + ((e | ~a) ^ b));
	d = ROTL32(d, 13) + c;
	a = ROTL32(a, 10);
	c = c + (data[6] + RH_RIPEMD_C4 + ((d | ~e) ^ a));
	c = ROTL32(c, 6) + b;
	e = ROTL32(e, 10);
	b = b + (data[13] + RH_RIPEMD_C4 + ((c | ~d) ^ e));
	b = ROTL32(b, 5) + a;
	d = ROTL32(d, 10);
	a = a + (data[11] + RH_RIPEMD_C4 + ((b | ~c) ^ d));
	a = ROTL32(a, 12) + e;
	c = ROTL32(c, 10);
	e = e + (data[5] + RH_RIPEMD_C4 + ((a | ~b) ^ c));
	e = ROTL32(e, 7) + d;
	b = ROTL32(b, 10);
	d = d + (data[12] + RH_RIPEMD_C4 + ((e | ~a) ^ b));
	d = ROTL32(d, 5) + c;
	a = ROTL32(a, 10);

	dd = dd + (data[15] + RH_RIPEMD_C5 + ((ee | ~aa) ^ bb));
	dd = ROTL32(dd, 9) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[5] + RH_RIPEMD_C5 + ((dd | ~ee) ^ aa));
	cc = ROTL32(cc, 7) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[1] + RH_RIPEMD_C5 + ((cc | ~dd) ^ ee));
	bb = ROTL32(bb, 15) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[3] + RH_RIPEMD_C5 + ((bb | ~cc) ^ dd));
	aa = ROTL32(aa, 11) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[7] + RH_RIPEMD_C5 + ((aa | ~bb) ^ cc));
	ee = ROTL32(ee, 8) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[14] + RH_RIPEMD_C5 + ((ee | ~aa) ^ bb));
	dd = ROTL32(dd, 6) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[6] + RH_RIPEMD_C5 + ((dd | ~ee) ^ aa));
	cc = ROTL32(cc, 6) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[9] + RH_RIPEMD_C5 + ((cc | ~dd) ^ ee));
	bb = ROTL32(bb, 14) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[11] + RH_RIPEMD_C5 + ((bb | ~cc) ^ dd));
	aa = ROTL32(aa, 12) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[8] + RH_RIPEMD_C5 + ((aa | ~bb) ^ cc));
	ee = ROTL32(ee, 13) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[12] + RH_RIPEMD_C5 + ((ee | ~aa) ^ bb));
	dd = ROTL32(dd, 5) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[2] + RH_RIPEMD_C5 + ((dd | ~ee) ^ aa));
	cc = ROTL32(cc, 14) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[10] + RH_RIPEMD_C5 + ((cc | ~dd) ^ ee));
	bb = ROTL32(bb, 13) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[0] + RH_RIPEMD_C5 + ((bb | ~cc) ^ dd));
	aa = ROTL32(aa, 13) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[4] + RH_RIPEMD_C5 + ((aa | ~bb) ^ cc));
	ee = ROTL32(ee, 7) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[13] + RH_RIPEMD_C5 + ((ee | ~aa) ^ bb));
	dd = ROTL32(dd, 5) + cc;
	aa = ROTL32(aa, 10);

	c = c + (data[1] + RH_RIPEMD_C6 + ((d & a) | (e & ~a)));
	c = ROTL32(c, 11) + b;
	e = ROTL32(e, 10);
	b = b + (data[9] + RH_RIPEMD_C6 + ((c & e) | (d & ~e)));
	b = ROTL32(b, 12) + a;
	d = ROTL32(d, 10);
	a = a + (data[11] + RH_RIPEMD_C6 + ((b & d) | (c & ~d)));
	a = ROTL32(a, 14) + e;
	c = ROTL32(c, 10);
	e = e + (data[10] + RH_RIPEMD_C6 + ((a & c) | (b & ~c)));
	e = ROTL32(e, 15) + d;
	b = ROTL32(b, 10);
	d = d + (data[0] + RH_RIPEMD_C6 + ((e & b) | (a & ~b)));
	d = ROTL32(d, 14) + c;
	a = ROTL32(a, 10);
	c = c + (data[8] + RH_RIPEMD_C6 + ((d & a) | (e & ~a)));
	c = ROTL32(c, 15) + b;
	e = ROTL32(e, 10);
	b = b + (data[12] + RH_RIPEMD_C6 + ((c & e) | (d & ~e)));
	b = ROTL32(b, 9) + a;
	d = ROTL32(d, 10);
	a = a + (data[4] + RH_RIPEMD_C6 + ((b & d) | (c & ~d)));
	a = ROTL32(a, 8) + e;
	c = ROTL32(c, 10);
	e = e + (data[13] + RH_RIPEMD_C6 + ((a & c) | (b & ~c)));
	e = ROTL32(e, 9) + d;
	b = ROTL32(b, 10);
	d = d + (data[3] + RH_RIPEMD_C6 + ((e & b) | (a & ~b)));
	d = ROTL32(d, 14) + c;
	a = ROTL32(a, 10);
	c = c + (data[7] + RH_RIPEMD_C6 + ((d & a) | (e & ~a)));
	c = ROTL32(c, 5) + b;
	e = ROTL32(e, 10);
	b = b + (data[15] + RH_RIPEMD_C6 + ((c & e) | (d & ~e)));
	b = ROTL32(b, 6) + a;
	d = ROTL32(d, 10);
	a = a + (data[14] + RH_RIPEMD_C6 + ((b & d) | (c & ~d)));
	a = ROTL32(a, 8) + e;
	c = ROTL32(c, 10);
	e = e + (data[5] + RH_RIPEMD_C6 + ((a & c) | (b & ~c)));
	e = ROTL32(e, 6) + d;
	b = ROTL32(b, 10);
	d = d + (data[6] + RH_RIPEMD_C6 + ((e & b) | (a & ~b)));
	d = ROTL32(d, 5) + c;
	a = ROTL32(a, 10);
	c = c + (data[2] + RH_RIPEMD_C6 + ((d & a) | (e & ~a)));
	c = ROTL32(c, 12) + b;
	e = ROTL32(e, 10);

	cc = cc + (data[8] + RH_RIPEMD_C7 + ((dd & ee) | (~dd & aa)));
	cc = ROTL32(cc, 15) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[6] + RH_RIPEMD_C7 + ((cc & dd) | (~cc & ee)));
	bb = ROTL32(bb, 5) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[4] + RH_RIPEMD_C7 + ((bb & cc) | (~bb & dd)));
	aa = ROTL32(aa, 8) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[1] + RH_RIPEMD_C7 + ((aa & bb) | (~aa & cc)));
	ee = ROTL32(ee, 11) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[3] + RH_RIPEMD_C7 + ((ee & aa) | (~ee & bb)));
	dd = ROTL32(dd, 14) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[11] + RH_RIPEMD_C7 + ((dd & ee) | (~dd & aa)));
	cc = ROTL32(cc, 14) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[15] + RH_RIPEMD_C7 + ((cc & dd) | (~cc & ee)));
	bb = ROTL32(bb, 6) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[0] + RH_RIPEMD_C7 + ((bb & cc) | (~bb & dd)));
	aa = ROTL32(aa, 14) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[5] + RH_RIPEMD_C7 + ((aa & bb) | (~aa & cc)));
	ee = ROTL32(ee, 6) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[12] + RH_RIPEMD_C7 + ((ee & aa) | (~ee & bb)));
	dd = ROTL32(dd, 9) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[2] + RH_RIPEMD_C7 + ((dd & ee) | (~dd & aa)));
	cc = ROTL32(cc, 12) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[13] + RH_RIPEMD_C7 + ((cc & dd) | (~cc & ee)));
	bb = ROTL32(bb, 9) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[9] + RH_RIPEMD_C7 + ((bb & cc) | (~bb & dd)));
	aa = ROTL32(aa, 12) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[7] + RH_RIPEMD_C7 + ((aa & bb) | (~aa & cc)));
	ee = ROTL32(ee, 5) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[10] + RH_RIPEMD_C7 + ((ee & aa) | (~ee & bb)));
	dd = ROTL32(dd, 15) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[14] + RH_RIPEMD_C7 + ((dd & ee) | (~dd & aa)));
	cc = ROTL32(cc, 8) + bb;
	ee = ROTL32(ee, 10);

	b = b + (data[4] + RH_RIPEMD_C8 + (c ^ (d | ~e)));
	b = ROTL32(b, 9) + a;
	d = ROTL32(d, 10);
	a = a + (data[0] + RH_RIPEMD_C8 + (b ^ (c | ~d)));
	a = ROTL32(a, 15) + e;
	c = ROTL32(c, 10);
	e = e + (data[5] + RH_RIPEMD_C8 + (a ^ (b | ~c)));
	e = ROTL32(e, 5) + d;
	b = ROTL32(b, 10);
	d = d + (data[9] + RH_RIPEMD_C8 + (e ^ (a | ~b)));
	d = ROTL32(d, 11) + c;
	a = ROTL32(a, 10);
	c = c + (data[7] + RH_RIPEMD_C8 + (d ^ (e | ~a)));
	c = ROTL32(c, 6) + b;
	e = ROTL32(e, 10);
	b = b + (data[12] + RH_RIPEMD_C8 + (c ^ (d | ~e)));
	b = ROTL32(b, 8) + a;
	d = ROTL32(d, 10);
	a = a + (data[2] + RH_RIPEMD_C8 + (b ^ (c | ~d)));
	a = ROTL32(a, 13) + e;
	c = ROTL32(c, 10);
	e = e + (data[10] + RH_RIPEMD_C8 + (a ^ (b | ~c)));
	e = ROTL32(e, 12) + d;
	b = ROTL32(b, 10);
	d = d + (data[14] + RH_RIPEMD_C8 + (e ^ (a | ~b)));
	d = ROTL32(d, 5) + c;
	a = ROTL32(a, 10);
	c = c + (data[1] + RH_RIPEMD_C8 + (d ^ (e | ~a)));
	c = ROTL32(c, 12) + b;
	e = ROTL32(e, 10);
	b = b + (data[3] + RH_RIPEMD_C8 + (c ^ (d | ~e)));
	b = ROTL32(b, 13) + a;
	d = ROTL32(d, 10);
	a = a + (data[8] + RH_RIPEMD_C8 + (b ^ (c | ~d)));
	a = ROTL32(a, 14) + e;
	c = ROTL32(c, 10);
	e = e + (data[11] + RH_RIPEMD_C8 + (a ^ (b | ~c)));
	e = ROTL32(e, 11) + d;
	b = ROTL32(b, 10);
	d = d + (data[6] + RH_RIPEMD_C8 + (e ^ (a | ~b)));
	d = ROTL32(d, 8) + c;
	a = ROTL32(a, 10);
	c = c + (data[15] + RH_RIPEMD_C8 + (d ^ (e | ~a)));
	c = ROTL32(c, 5) + b;
	e = ROTL32(e, 10);
	b = b + (data[13] + RH_RIPEMD_C8 + (c ^ (d | ~e)));
	b = ROTL32(b, 6) + a;
	d = ROTL32(d, 10);

	bb = bb + (data[12] + (cc ^ dd ^ ee));
	bb = ROTL32(bb, 8) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[15] + (bb ^ cc ^ dd));
	aa = ROTL32(aa, 5) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[10] + (aa ^ bb ^ cc));
	ee = ROTL32(ee, 12) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[4] + (ee ^ aa ^ bb));
	dd = ROTL32(dd, 9) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[1] + (dd ^ ee ^ aa));
	cc = ROTL32(cc, 12) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[5] + (cc ^ dd ^ ee));
	bb = ROTL32(bb, 5) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[8] + (bb ^ cc ^ dd));
	aa = ROTL32(aa, 14) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[7] + (aa ^ bb ^ cc));
	ee = ROTL32(ee, 6) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[6] + (ee ^ aa ^ bb));
	dd = ROTL32(dd, 8) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[2] + (dd ^ ee ^ aa));
	cc = ROTL32(cc, 13) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[13] + (cc ^ dd ^ ee));
	bb = ROTL32(bb, 6) + aa;
	dd = ROTL32(dd, 10);
	aa = aa + (data[14] + (bb ^ cc ^ dd));
	aa = ROTL32(aa, 5) + ee;
	cc = ROTL32(cc, 10);
	ee = ee + (data[0] + (aa ^ bb ^ cc));
	ee = ROTL32(ee, 15) + dd;
	bb = ROTL32(bb, 10);
	dd = dd + (data[3] + (ee ^ aa ^ bb));
	dd = ROTL32(dd, 13) + cc;
	aa = ROTL32(aa, 10);
	cc = cc + (data[9] + (dd ^ ee ^ aa));
	cc = ROTL32(cc, 11) + bb;
	ee = ROTL32(ee, 10);
	bb = bb + (data[11] + (cc ^ dd ^ ee));
	bb = ROTL32(bb, 11) + aa;
	dd = ROTL32(dd, 10);

	dd = dd + c + state[1];
	state[1]  = state[2] + d + ee;
	state[2]  = state[3] + e + aa;
	state[3]  = state[4] + a + bb;
	state[4]  = state[0] + b + cc;
	state[0]  = dd;
}


void RandomHash_RIPEMD160(RH_StridePtr roundInput, RH_StridePtr output)
{
       
    // optimized algo
    RH_ALIGN(64) uint32_t state[5] = { 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0 };
    RandomHash_MD_BASE_MAIN_LOOP(RIPEMD160_BLOCK_SIZE, Ripemd160RoundFunction, uint64_t);
    
    //get the hash result
    memcpy(RH_STRIDE_GET_DATA(output), state, 5 * 4);
    RH_STRIDE_SET_SIZE(output, 5 * 4);
    
} 
